# Generated by Django 3.1.5 on 2021-03-05 21:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("supervised_learning", "0007_rename_hgbtree_to_hgbtreeclassifier"),
    ]

    operations = [
        migrations.CreateModel(
            name="HGBTreeRegressor",
            fields=[
                (
                    "supervisedlearningtechnique_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="supervised_learning.supervisedlearningtechnique",
                    ),
                ),
                (
                    "loss",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("least_squares", "Least Squares"),
                            (
                                "least_absolute_deviation",
                                "Least Absolute Deviation",
                            ),
                            ("poisson", "Poisson"),
                        ],
                        default="least_squares",
                        help_text="The loss function to be used in the boosting process. If none is given, least_squares will be used.",
                        max_length=50,
                        null=True,
                        verbose_name="Loss function",
                    ),
                ),
                (
                    "learning_rate",
                    models.FloatField(
                        blank=True,
                        default=0.1,
                        help_text="The leraning rate, a.k.a. shrinkage. Multiplicative factor for the leaves values. Use 1 for no shrinkage.",
                        null=True,
                        verbose_name="Learning Rate",
                    ),
                ),
                (
                    "max_leaf_nodes",
                    models.IntegerField(
                        blank=True,
                        default=31,
                        help_text="If not None, must be strictly greater than 1.",
                        null=True,
                        verbose_name="Maximum number of leaves for each tree",
                    ),
                ),
                (
                    "max_depth",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="Depth is not constrained by default.",
                        null=True,
                        verbose_name="Maximum depth of each tree",
                    ),
                ),
                (
                    "min_samples_leaf",
                    models.IntegerField(
                        blank=True,
                        default=20,
                        help_text="For datasets with less than hundred of samples, it is recommended to be lower than 20.",
                        null=True,
                        verbose_name="Minimum number of samples per leaf",
                    ),
                ),
                (
                    "l2_regularization",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Use 0 for no regularization.",
                        null=True,
                        verbose_name="L2 Regularization Parameter",
                    ),
                ),
                (
                    "max_bins",
                    models.IntegerField(
                        blank=True,
                        default=255,
                        help_text="Must be no larger than 255.",
                        null=True,
                        verbose_name="Maximum number of bins for non-missing values",
                    ),
                ),
                (
                    "warm_start",
                    models.BooleanField(
                        default=False,
                        help_text="When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble. For results to be valid, the estimator should be re-trained on the same data only.",
                        verbose_name="Warm Start",
                    ),
                ),
                (
                    "early_stopping",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("auto", "Automatic"),
                            ("true", "True"),
                            ("false", "False"),
                        ],
                        default="auto",
                        help_text="If auto, early stopping is enabled if the sample size is greater than 10000. If true, is enabled, otherwise disabled.",
                        max_length=50,
                        null=True,
                        verbose_name="Early Stopping (ES)",
                    ),
                ),
                (
                    "scoring",
                    models.CharField(
                        blank=True,
                        default="loss",
                        help_text="If None, the estimator's default scorer is used. Only used if early stopping is performed.",
                        max_length=50,
                        null=True,
                        verbose_name="Scoring Paramenter for ES",
                    ),
                ),
                (
                    "validation_fraction",
                    models.FloatField(
                        blank=True,
                        default=0.1,
                        help_text="Proportion of training data for validating early stopping. Only used if early stopping is performed.",
                        null=True,
                        verbose_name="Validation Fraction for ES",
                    ),
                ),
                (
                    "n_iter_no_change",
                    models.IntegerField(
                        blank=True,
                        default=10,
                        help_text='Used to determine when to "Early Stop". Only used if early stopping is performed.',
                        null=True,
                        verbose_name="Iterations without Change for ES",
                    ),
                ),
                (
                    "tol",
                    models.FloatField(
                        blank=True,
                        default="1e-7",
                        help_text='The higher the tolerance, the more likely to "early stop". Only used if early stopping is performed.',
                        null=True,
                        verbose_name="Abs. Tol. for comparing Scores for ES",
                    ),
                ),
                (
                    "verbose",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="If not zero, print some information about the fitting process. (currently STDOUT in the Django process)",
                        null=True,
                        verbose_name="Verbosity Level",
                    ),
                ),
                (
                    "random_state",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="Use a number for reproducible output across multiple function calls",
                        null=True,
                        verbose_name="Random State seed number",
                    ),
                ),
                (
                    "max_iter",
                    models.IntegerField(
                        blank=True,
                        default=100,
                        help_text="Maximum number of iterations",
                        null=True,
                        verbose_name="Maximum number of iterations",
                    ),
                ),
            ],
            options={
                "verbose_name": "HGB Tree for Regression",
                "verbose_name_plural": "HGB Trees for Regression",
            },
            bases=("supervised_learning.supervisedlearningtechnique",),
        ),
    ]

# Generated by Django 4.2 on 2023-05-02 23:56

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("supervised_learning", "0011_alter_hgbtreeregressor_loss"),
    ]

    operations = [
        migrations.CreateModel(
            name="OneClassSVC",
            fields=[
                (
                    "supervisedlearningtechnique_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="supervised_learning.supervisedlearningtechnique",
                    ),
                ),
                (
                    "kernel",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("linear", "Linear"),
                            ("poly", "Polynomial"),
                            ("rbf", "RBF"),
                            ("linear", "Linear"),
                            ("sigmoid", "Sigmoid"),
                            ("precomputed", "Precomputed"),
                        ],
                        default="rbf",
                        help_text="Kernel to be used in the SVM. If none is given, RBF will be used.",
                        max_length=50,
                        null=True,
                        verbose_name="SVM Kernel",
                    ),
                ),
                (
                    "kernel_poly_degree",
                    models.IntegerField(
                        blank=True,
                        default=3,
                        help_text="Degree of the Polynomial Kernel function. Ignored by all other Kernels.",
                        null=True,
                        verbose_name="Polynomial Kernel degree",
                    ),
                ),
                (
                    "kernel_coefficient",
                    models.CharField(
                        blank=True,
                        default="scale",
                        help_text='Kernel coefficient for RBF, Polynomial and Sigmoid. "scale", "auto" or a float are supported.',
                        max_length=20,
                        null=True,
                        verbose_name="Kernel coefficient",
                    ),
                ),
                (
                    "kernel_independent_term",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        help_text="Independent term in kernel function. It is only significant in Polynomial and Sigmoid kernels.",
                        null=True,
                        verbose_name="Kernel Independent Term",
                    ),
                ),
                (
                    "nu",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        help_text="An upper bound on the fraction of training errors and a lower bound of the fraction of support vectors. Should be in the interval (0, 1]. By default 0.5 will be taken.",
                        null=True,
                        verbose_name="Nu",
                    ),
                ),
                (
                    "use_shrinking",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to use the shrinking heuristic.",
                        verbose_name="Use Shrinking Heuristic?",
                    ),
                ),
                (
                    "tolerance",
                    models.FloatField(
                        blank=True,
                        default="1e-3",
                        help_text="Tolerance for stopping criterion.",
                        null=True,
                        verbose_name="Tolerance",
                    ),
                ),
                (
                    "cache_size",
                    models.FloatField(
                        blank=True,
                        default=200,
                        help_text="Specify the size of the kernel cache (in MB).",
                        null=True,
                        verbose_name="Kernel Cache Size (MB)",
                    ),
                ),
                (
                    "verbose",
                    models.BooleanField(
                        default=False,
                        help_text="Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.",
                        verbose_name="Be Verbose?",
                    ),
                ),
                (
                    "max_iter",
                    models.IntegerField(
                        blank=True,
                        default=10000,
                        help_text="Stop if Maximum Iterations has been reached without meeting algorithm converge conditions",
                        null=True,
                        verbose_name="Maximum Iterations Safeguard",
                    ),
                ),
                (
                    "images",
                    models.ImageField(
                        blank=True,
                        help_text="Auto-generated Image if available",
                        null=True,
                        upload_to="",
                        verbose_name="Image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Support Vector Machine - Outlier Detection",
                "verbose_name_plural": "Support Vector Machines - Outlier Detection",
            },
            bases=("supervised_learning.supervisedlearningtechnique",),
        ),
    ]
